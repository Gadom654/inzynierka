version: 2.1

parameters:
  remove_test_1_failed:
    type: boolean
    default: false
  remove_test_2_failed:
    type: boolean
    default: false

jobs:
  apply:
    working_directory: /tmp/project
    docker:
      - image: cimg/base:2023.11
    steps:
      - checkout
      - run:
          name: Terraform Apply Green ec2 and switch traffic
          command: |
            sudo apt-get update && sudo apt-get install -y gnupg software-properties-common
            wget -O- https://apt.releases.hashicorp.com/gpg | \
            gpg --dearmor | \
            sudo tee /usr/share/keyrings/hashicorp-archive-keyring.gpg
            gpg --no-default-keyring \
            --keyring /usr/share/keyrings/hashicorp-archive-keyring.gpg \
            --fingerprint
            echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] \
            https://apt.releases.hashicorp.com $(lsb_release -cs) main" | \
            sudo tee /etc/apt/sources.list.d/hashicorp.list
            sudo apt-get update
            sudo apt-get install terraform
            terraform init -input=false
            sudo apt-get update && sudo apt-get install packer
            packer init .
            packer build app-ami.hcl
            sudo apt install -y jq
            source parsing.sh
            terraform apply -auto-approve
      - persist_to_workspace:
          root: .
          paths:
            - .

  test1:
    docker:
      - image: docker.mirror.hashicorp.services/hashicorp/terraform:light
    steps:
      - attach_workspace:
          at: .
      - run:
          name: test traffic
          command: |
            set -e  # Ensure the script exits on first command failure
            if ! curl http://example-elb-497548929.eu-central-1.elb.amazonaws.com/test; then
              echo "Test failed, executing failure steps..."
              echo "is_green_active=false" >> terraform.auto.tfvars
              echo "active_deployment=\"blue\"" >> terraform.auto.tfvars
              terraform init
              terraform apply -auto-approve
              echo "Exiting pipeline due to test failure"
              exit 1  # Exit the script with a failure status
            fi

  test2:
    docker:
      - image: docker.mirror.hashicorp.services/hashicorp/terraform:light
    steps:
      - attach_workspace:
          at: .
      - run:
          name: test traffic
          command: |
            set -e  # Ensure the script exits on first command failure
            if ! curl http://example-elb-497548929.eu-central-1.elb.amazonaws.com/test; then
              echo "Test failed, executing failure steps..."
              echo "is_green_active=false" >> terraform.auto.tfvars
              echo "active_deployment=\"blue\"" >> terraform.auto.tfvars
              terraform init
              terraform apply -auto-approve
              echo "Exiting pipeline due to test failure"
              exit 1  # Exit the script with a failure status
            fi

  switch:
    docker:
      - image: docker.mirror.hashicorp.services/hashicorp/terraform:light
    steps:
      - attach_workspace:
          at: .
      - run:
          name: update blue ami
          command: |
            sed -i 's/blue_ami_id/old_blue_ami_id/g' terraform.auto.tfvars
            sed -i 's/green_ami_id/blue_ami_id/g' terraform.auto.tfvars
            cat terraform.tfvars >> terraform.auto.tfvars
            echo "active_deployment=\"blue\"" >> terraform.auto.tfvars
            terraform init
            terraform apply -auto-approve
      - persist_to_workspace:
          root: .
          paths:
            - .

  remove:
    docker:
      - image: docker.mirror.hashicorp.services/hashicorp/terraform:light
    steps:
      - attach_workspace:
          at: .
      - run:
          name: remove green ami
          command: |
            echo "is_green_active=false" >> terraform.auto.tfvars
            terraform init
            terraform apply -auto-approve

workflows:
  version: 2
  plan_approve_apply:
    jobs:
      - apply:
          filters:
            branches:
              only: main
      - test1:
          requires:
            - apply
          filters:
            branches:
              only: main
      - switch:
          requires:
            - test1
          filters:
            branches:
              only: main
      - test2:
          requires:
            - switch
          filters:
            branches:
              only: main
      - remove:
          requires:
            - test2
          filters:
            branches:
              only: main
